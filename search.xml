<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker部署Nginx转发宿主机服务</title>
    <url>/2020/03/docker-nginx/</url>
    <content><![CDATA[<html><head></head><body><h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>前几天在搭建自己的服务器的时候，想用用Docker试试，方便服务管理，在搭建自己Anki的过程中没有找到相关的Docker包，于是直接就在服务器上跑了Anki，还挂载了一个资源目录，做转发的时候就在想，我用Docker跑是为了什么，我还要把重启目录挂进去，感觉还是比较麻烦。在服务数量不多的时候不如直接跑来的方便。。</p>
<p>由于我用的是CentOS，所以以下都以CentOS都视角来讲述</p>
<h1 id="Docker安装"><a href="#Docker安装" class="headerlink" title="Docker安装"></a>Docker安装</h1><p>先看看服务器上是否有相关源</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> yum search docker</span></span><br></pre></td></tr></tbody></table></figure>

<p>如果没有都话先添加</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum-config-manager \</span></span><br><span class="line">    --add-repo \</span><br><span class="line">    https://mirrors.ustc.edu.cn/docker-ce/linux/centos/docker-ce.repo</span><br></pre></td></tr></tbody></table></figure>

<p>更新yum源缓存，并安装docker</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum makecache fast</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install docker-ce</span></span><br></pre></td></tr></tbody></table></figure>

<p>启动docker</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo systemctl start docker</span></span><br></pre></td></tr></tbody></table></figure>

<p>测试下docker是否运行成功</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run hello-world</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Unable to find image 'hello-world:latest' locally</span><br><span class="line">Trying to pull repository docker.io/library/hello-world ... </span><br><span class="line"></span><br><span class="line">latest: Pulling from docker.io/library/hello-world</span><br><span class="line">1b930d010525: Pull complete </span><br><span class="line">Digest: sha256:f9dfddf63636d84ef479d645ab5885156ae030f611a56f3a7ac7f2fdd86d7e4e</span><br><span class="line">Status: Downloaded newer image for docker.io/hello-world:latest</span><br><span class="line"></span><br><span class="line">Hello from Docker!</span><br><span class="line">This message shows that your installation appears to be working correctly.</span><br><span class="line"></span><br><span class="line">To generate this message, Docker took the following steps:</span><br><span class="line"> 1. The Docker client contacted the Docker daemon.</span><br><span class="line"> 2. The Docker daemon pulled the "hello-world" image from the Docker Hub.</span><br><span class="line">    (amd64)</span><br><span class="line"> 3. The Docker daemon created a new container from that image which runs the</span><br><span class="line">    executable that produces the output you are currently reading.</span><br><span class="line"> 4. The Docker daemon streamed that output to the Docker client, which sent it</span><br><span class="line">    to your terminal.</span><br><span class="line"></span><br><span class="line">To try something more ambitious, you can run an Ubuntu container with:</span><br><span class="line"><span class="meta"> $</span><span class="bash"> docker run -it ubuntu bash</span></span><br><span class="line"></span><br><span class="line">Share images, automate workflows, and more with a free Docker ID:</span><br><span class="line"> https://hub.docker.com/</span><br><span class="line"></span><br><span class="line">For more examples and ideas, visit:</span><br><span class="line"> https://docs.docker.com/get-started/</span><br></pre></td></tr></tbody></table></figure>

<p>如果helloword正常运行则表明安装成功</p>
<h1 id="Nginx安装"><a href="#Nginx安装" class="headerlink" title="Nginx安装"></a>Nginx安装</h1><p>如果需要安装指定版本Nginx的话可以先查看Nginx版本</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker search nginx</span></span><br></pre></td></tr></tbody></table></figure>

<p>安装nginx</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker pull nginx</span></span><br></pre></td></tr></tbody></table></figure>

<p>查看本地image</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker image ls</span></span><br><span class="line">REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">docker.io/nginx     latest              a1523e859360        2 weeks ago         127 MB</span><br></pre></td></tr></tbody></table></figure>
<p>可以看到刚pull的nginx的image</p>
<p>接下来我们开始运行Nginx试一试</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name <span class="built_in">test</span> -p 8080:80 -d nginx</span></span><br></pre></td></tr></tbody></table></figure>
<ul>
<li>–name test: 指定容器名称</li>
<li>-p 8080:80: 将本地的8080端口映射到docker容器内的80端口</li>
<li>-d nginx: 后台运行Nginx</li>
</ul>
<p>现在我们可以打开浏览器访问一下8080端口，访问成功说明Ngnix就起来了，没有的话可能是防火墙的原因，看看8080端口是不是没打开</p>
<h1 id="挂载宿主机目录"><a href="#挂载宿主机目录" class="headerlink" title="挂载宿主机目录"></a>挂载宿主机目录</h1><p>由于nginx.conf以及log之类的文件会经常有查看的需求，所以一般将这些文件放在宿主机中，并将这些文件目录地址挂载到docker容器中</p>
<p>现在我们关闭刚才启动的Nginx</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker stop nginx</span></span><br></pre></td></tr></tbody></table></figure>

<p>然后创建想要挂载的目录，以Nginx.conf为例</p>
<figure class="highlight shell"><table><tbody><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker run --name nginx -p 80:80 \</span></span><br><span class="line">-v /data/nginx/conf/nginx.conf:/etc/nginx/conf/nginx.conf \</span><br><span class="line">-v /data/nginx/conf.d/:/etc/nginx/conf.d \</span><br><span class="line">-v /data/nginx/logs:/var/log/nginx \</span><br><span class="line">-d nginx</span><br></pre></td></tr></tbody></table></figure>
<p>-v指将宿主机目录挂载到容器中</p>
<ul>
<li>使用方式为 -v <strong>宿主目录或文件路径</strong>:<strong>docker容器目录或文件路径</strong></li>
</ul>
</body></html>]]></content>
      <categories>
        <category>Develop</category>
        <category>Docker</category>
      </categories>
      <tags>
        <tag>Docker</tag>
        <tag>Nginx转发</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo自动推送简化工具相关</title>
    <url>/2020/03/auto-push/</url>
    <content><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>在初步搭建完hexo之后，就开始想，因为是搭建在自己的服务器上，同时GitHub也会推送一份，以及刚好看到 <font color="red"><strong>七牛云有免费CDN云存储</strong></font> 10G免费，用来当图片之类当静态资源就很不错了。</p>
<p>当然，在刚开始搭的时候，完全就是人工智能， hexo g、hexo d、qshell推送，然后服务器pull、nginx给个代理做转发，各种一系列的操作。真人工智能是一个愚蠢的事情了。于是转变想法，先开始写一些工具脚本，完成自动化的推送。</p>
<h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><ul>
<li>自动化打包推送</li>
<li>图片请求地址链接</li>
</ul>
<h2 id="打包推送"><a href="#打包推送" class="headerlink" title="打包推送"></a>打包推送</h2><p>这个应该就不用怎么讲了，因为都是静态资源，packagejson加一些请求参数就可以了</p>
<figure class="highlight"><table><tbody><tr><td class="code"><pre><span class="line">"scripts": {</span><br><span class="line">  "build": "hexo generate",</span><br><span class="line">  "clean": "hexo clean",</span><br><span class="line">  "deploy": "hexo deploy",</span><br><span class="line">  "server": "hexo server",</span><br><span class="line">  "d": "hexo clean && hexo g && hexo d && qshell qupload qiniu_conf.json && node sftp_upload.js"</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure>

<p>简单的写了一个sftp推送的方法，贴出来 sftp_uplopad.js</p>
<figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> Client = <span class="built_in">require</span>(<span class="string">'ssh2-sftp-client'</span>)</span><br><span class="line"><span class="keyword">let</span> sftp = <span class="keyword">new</span> Client()</span><br><span class="line"><span class="keyword">const</span> host = <span class="string">'推送服务器地址'</span></span><br><span class="line"><span class="keyword">const</span> port = <span class="string">'请求端口'</span></span><br><span class="line"><span class="keyword">const</span> username = <span class="string">'登录用户名'</span></span><br><span class="line"><span class="keyword">const</span> pwd = <span class="string">'密码'</span></span><br><span class="line"><span class="keyword">const</span> src = <span class="string">'本地public目录地址'</span></span><br><span class="line"><span class="keyword">const</span> dst = <span class="string">'服务器推送地址'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// sftp推送目录</span></span><br><span class="line">sftp.connect({</span><br><span class="line">    host: host,</span><br><span class="line">    port: port,</span><br><span class="line">    username: username,</span><br><span class="line">    password: pwd</span><br><span class="line">  }).then(<span class="function"><span class="params">()</span> =></span> {</span><br><span class="line">    <span class="keyword">return</span> sftp.uploadDir(src, dst)</span><br><span class="line">  }).then(<span class="function">(<span class="params">data</span>) =></span> {</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'上传完成'</span>)</span><br><span class="line">    sftp.end()</span><br><span class="line">  })</span><br><span class="line">  .catch(<span class="function">(<span class="params">err</span>) =></span> {</span><br><span class="line">    <span class="built_in">console</span>.log(err, <span class="string">'catch error'</span>)</span><br><span class="line">  })</span><br></pre></td></tr></tbody></table></figure>

<h2 id="图床使用"><a href="#图床使用" class="headerlink" title="图床使用"></a>图床使用</h2><ul>
<li>最外层目录建立资源目录，存放静态资源。</li>
<li>将该目录上传至七牛云存储</li>
<li>这部分请求地址修改插件写好直接运行 <strong>npm install hexo-img-prefix</strong> 安装即可</li>
<li>安装完之后在_config.yml中添加  <figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="attr">img_prefix:</span> <span class="string">http://yourserver.com/youraddress</span></span><br></pre></td></tr></tbody></table></figure>

</li>
</ul>
<blockquote>
<p>详情参见 <a href="http://119.3.50.146/hexo%E5%9B%BE%E5%BA%8A%E6%95%99%E7%A8%8B-%E5%90%8C%E6%97%B6%E8%83%BD%E5%A4%9F%E5%9C%A8vscode%E4%B8%AD%E9%A2%84%E8%A7%88/" target="_blank" rel="noopener">痴汉的日常-hexo图床教程</a></p>
</blockquote>
</body></html>]]></content>
      <categories>
        <category>Hexo</category>
        <category>搭博客踩坑</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>自动推送</tag>
        <tag>脚手架</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo添加留言及浏览统计</title>
    <url>/2020/03/message-board/</url>
    <content><![CDATA[<html><head></head><body><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>查看了下next的配置文件以及看了一上午的相关方案和尝试踩坑，目前留言板使用比较多多主要有以下几种方案。</p>
<ul>
<li>valine</li>
<li>Disqus</li>
<li>畅言</li>
<li>gitalk</li>
<li>livere</li>
</ul>
<h1 id="valine"><a href="#valine" class="headerlink" title="valine"></a>valine</h1><h2 id="注册Leancloud"><a href="#注册Leancloud" class="headerlink" title="注册Leancloud"></a>注册Leancloud</h2><p><a href="https://leancloud.cn/?source=006ECWQH" target="_blank" rel="noopener">点我注册Leancloud</a></p>
<p>使用valine的时候评论、阅读统计都是放在Leancloud上的，需要注意的是valine是从 <strong>v1.2.0</strong> 开始支持文章阅读统计</p>
<p>首先注册创建一个应用，注册完了之后获取注册的appid和appkey</p>
<h2 id="创建应用获取Appkey"><a href="#创建应用获取Appkey" class="headerlink" title="创建应用获取Appkey"></a>创建应用获取Appkey</h2><p><strong>创建</strong><br><img src="http://hiagt.assets.hiagt.cn/assets/hexo/WX20200315-140412@2x.png" alt="创建"><br><strong>设置</strong>  <strong><em>这个设置真的很难看到</em></strong><br><img src="http://hiagt.assets.hiagt.cn/assets/hexo/WX20200315-141316@2x.png" alt="设置"><br><strong>获取AppID和AppKey</strong><br><img src="http://hiagt.assets.hiagt.cn/assets/hexo/1584253137389.jpg" alt="key"></p>
<h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>获取到了appid和appkey之后打开 <strong>主题配置文件</strong> 搜索 <strong>valine</strong> 填写相关信息</p>
<figure class="highlight yml"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"># Valine</span></span><br><span class="line"><span class="comment"># For more information: https://valine.js.org, https://github.com/xCss/Valine</span></span><br><span class="line"><span class="attr">valine:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">appid:</span> <span class="comment"># Your leancloud application appid</span></span><br><span class="line">  <span class="attr">appkey:</span> <span class="comment"># Your leancloud application appkey</span></span><br><span class="line">  <span class="attr">notify:</span> <span class="literal">false</span> <span class="comment"># Mail notifier</span></span><br><span class="line">  <span class="attr">verify:</span> <span class="literal">false</span> <span class="comment"># Verification code</span></span><br><span class="line">  <span class="attr">placeholder:</span> <span class="string">Just</span> <span class="string">go</span> <span class="string">go</span> <span class="comment"># Comment box placeholder</span></span><br><span class="line">  <span class="attr">avatar:</span> <span class="string">mm</span> <span class="comment"># Gravatar style</span></span><br><span class="line">  <span class="attr">guest_info:</span> <span class="string">nick,mail,link</span> <span class="comment"># Custom comment header</span></span><br><span class="line">  <span class="attr">pageSize:</span> <span class="number">10</span> <span class="comment"># Pagination size</span></span><br><span class="line">  <span class="attr">language:</span> <span class="string">zh-cn</span> <span class="comment"># Language, available values: en, zh-cn</span></span><br><span class="line">  <span class="attr">visitor:</span> <span class="literal">true</span> <span class="comment"># Article reading statistic</span></span><br><span class="line">  <span class="attr">comment_count:</span> <span class="literal">true</span> <span class="comment"># If false, comment count will only be displayed in post page, not in home page</span></span><br><span class="line">  <span class="attr">recordIP:</span> <span class="literal">false</span> <span class="comment"># Whether to record the commenter IP</span></span><br><span class="line">  <span class="attr">serverURLs:</span> <span class="comment"># When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span></span><br><span class="line">  <span class="comment"># post_meta_order: 0</span></span><br></pre></td></tr></tbody></table></figure>

<h2 id="配置安全域名"><a href="#配置安全域名" class="headerlink" title="配置安全域名"></a>配置安全域名</h2><p>到这里刷新你的页面叭！你就可以看到留言板了哦！！但是一定要记得 <font color="#00dddd"><strong>到安全中心绑定安全域名</strong></font><br><img src="http://hiagt.assets.hiagt.cn/assets/hexo/WX20200315-143644@2x.png" alt="安全域名"></p>
<h2 id="阅读统计"><a href="#阅读统计" class="headerlink" title="阅读统计"></a>阅读统计</h2><figure class="highlight js"><table><tbody><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Valine({</span><br><span class="line">    el:<span class="string">'#vcomments'</span>,</span><br><span class="line">    ...</span><br><span class="line">    visitor: <span class="literal">true</span> <span class="comment">// 阅读量统计</span></span><br><span class="line">})</span><br></pre></td></tr></tbody></table></figure>

<blockquote>
<p>如果开启了 <strong>阅读量统计</strong>，Valine <strong>会自动检测</strong> leancloud 应用中是否存在 <strong>Counter</strong> 类，如果不存在 <strong>会自动创建</strong>，无需手动创建~</p>
<p>Valine会自动查找页面中 <strong>class</strong> 值为 <strong>leancloud_visitors</strong> 的元素，获取其 <strong>id</strong> 为查询条件。并将得到的值填充到其 <strong>class</strong> 的值为 <strong>leancloud-visitors-count</strong> 的子元素里：</p>
</blockquote>
<figure class="highlight html"><table><tbody><tr><td class="code"><pre><span class="line"><span class="comment"><!-- id 将作为查询条件 --></span></span><br><span class="line"><span class="tag"><<span class="name">span</span> <span class="attr">id</span>=<span class="string">"<Your/Path/Name>"</span> <span class="attr">class</span>=<span class="string">"leancloud_visitors"</span> <span class="attr">data-flag-title</span>=<span class="string">"Your Article Title"</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">em</span> <span class="attr">class</span>=<span class="string">"post-meta-item-text"</span>></span>阅读量 <span class="tag"></<span class="name">em</span>></span></span><br><span class="line">    <span class="tag"><<span class="name">i</span> <span class="attr">class</span>=<span class="string">"leancloud-visitors-count"</span>></span>1000000<span class="tag"></<span class="name">i</span>></span></span><br><span class="line"><span class="tag"></<span class="name">span</span>></span></span><br></pre></td></tr></tbody></table></figure>

<p>如果你看到这里没看懂的话，那没关系。<strong>回到valine的配置文件吧</strong>！聪明的你肯定就明白了，现在的新版本只用在配置文件里把 <strong>visitor</strong> 改成true就行了。</p>
<blockquote>
<p><strong>参考</strong></p>
<p><a href="http://theme-next.iissnan.com/third-party-services.html#comment-system" target="_blank" rel="noopener">Next文档</a></p>
<p><a href="https://valine.js.org/visitor.html" target="_blank" rel="noopener">Valine文档</a></p>
<p><a href="http://www.cylong.com/blog/2017/03/26/hexo-next-disqus/" target="_blank" rel="noopener">Disqus集成</a></p>
</blockquote>
</body></html>]]></content>
      <categories>
        <category>Hexo</category>
        <category>搭博客踩坑</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
        <tag>回复</tag>
        <tag>评论</tag>
        <tag>留言板</tag>
        <tag>浏览统计</tag>
      </tags>
  </entry>
  <entry>
    <title>复盘笔记-2020.03.14</title>
    <url>/2020/03/control-20-03-14/</url>
    <content><![CDATA[<html><head></head><body><p>  上周随着国外疫情影响的爆发，恐慌情绪再度的蔓延，同时还有前期获利盘的了结。全盘进入了大坑的时期，获利很多之后又陷入了之前的自我矛盾。看到了顶没有找到更好的机会，又或者是看到了5G光电的机会。</p>
<p>  还是执着于此。基本收获三个跌停，浮盈基本打空。就像之前说的那样，情感难以控制，收获利润才最重要的，也不能因为有盈利就锁仓无所谓。跟钱过不去挺尴尬的。</p>
<p>  接下来感觉还是会锁仓，除非是跌到成本线，不过我觉得可能不太会，下周应该是一个震荡行情了。寻找场外机会吧，5G来临的感觉让我仿佛站在了13-15的封口浪尖。那个时候4G兴起，光电、通信设备、通信基建、4G相关概念疯涨。5倍-10倍常有。那波牛市究竟是因为什么呢，看法观点很多。现在的时间点是否和那个时候一样呢，感觉很像。但是又觉得还会有半年一年的震荡。锁仓等待和寻找其他机会吧。</p>
<p>  <img src="http://hiagt.assets.hiagt.cn/assets/control/1584208996638.jpg" alt="图"></p>
<p>  回撤还是难以接受，或者说难以接受的不是回撤，而是同样的错误不断犯却又情感上难以控制吧。不喜欢空仓容易冲动全仓上也是一个很严重的毛病。</p>
</body></html>]]></content>
      <categories>
        <category>analyses</category>
      </categories>
      <tags>
        <tag>control</tag>
      </tags>
  </entry>
  <entry>
    <title>复盘笔记-2020.02.28</title>
    <url>/2020/02/control-20-02-28/</url>
    <content><![CDATA[<html><head></head><body><p>  <img src="http://hiagt.assets.hiagt.cn/assets/control/Xnip2020-03-15_00-50-50.jpg" alt="图"><br>  还是一直很看好科技相关概念股，有人炒价格自然会涨，同时在国网大基建情景下，特高压也是一块很有前景的趋势。手上拿着的康佳有种莫名信念，但是我觉得这种信念是不太对的，自身也深陷这种矛盾。</p>
<p>  获利了结，价格回调。其实从上周五没有封死就应该看出来应该出掉等待获利了结的调整，下跌回落没有出掉也有有利润可以死扛的想法，但是好在及时的纠正了错误的思想，但是又掉入了另外一个坑，不期望自己的资金有空闲时刻，期望时刻都可以增长。比较草率的调仓，看到情况不对没有及时止损，扩大了损失。同时已经确认要调仓低位买入康佳时还是在止损卖出的时候犹豫了。犹豫的原因是因为想多卖一毛钱，导致调仓买入成本增加4个点，这挺致命的。</p>
<p>  在止损的时候还是很犹豫，做不到迅速果断的离场。</p>
<p>  短期内想要资产翻倍，也只能跟风喝汤了。但是跟风喝汤需要更果断的判断，不然就会成为煨汤的排骨。情感还是难以控制</p>
</body></html>]]></content>
      <categories>
        <category>analyses</category>
      </categories>
      <tags>
        <tag>control</tag>
      </tags>
  </entry>
  <entry>
    <title>Test</title>
    <url>/2017/08/Test/</url>
    <content><![CDATA[<html><head></head><body><p>lalalalallalalablackpiglalal</p>
</body></html>]]></content>
      <tags>
        <tag>test</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2017/08/hello-world/</url>
    <content><![CDATA[<html><head></head><body><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tbody><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></tbody></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
</body></html>]]></content>
  </entry>
</search>
